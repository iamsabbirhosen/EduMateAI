{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///F:/EduMateFinalAI/EduMateAI/src/app/api/admin/topics/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport fs from 'fs/promises';\r\nimport path from 'path';\r\n\r\n// Simple admin auth check\r\nfunction isAdminRequest(request: NextRequest): boolean {\r\n  const referer = request.headers.get('referer');\r\n  return !!(referer && referer.includes('localhost:9002/admin'));\r\n}\r\n\r\n// Helper function to transliterate Bengali to English\r\nfunction transliterateBengali(bengaliText: string): string {\r\n  const bengaliToEnglish: { [key: string]: string } = {\r\n    // Physics topics\r\n    'নিউটনের প্রথম সূত্র': 'newtons-1st-law',\r\n    'নিউটনের দ্বিতীয় সূত্র': 'newtons-2nd-law',\r\n    'নিউটনের তৃতীয় সূত্র': 'newtons-3rd-law',\r\n    'তাপের শূন্যতম সূত্র': 'zeroth-law',\r\n    'তাপের প্রথম সূত্র': 'first-law',\r\n    'তাপের দ্বিতীয় সূত্র': 'second-law',\r\n    \r\n    // Chemistry topics\r\n    'পর্যায়বৃত্ত প্রবণতা': 'periodic-trends',\r\n    'ইলেকট্রন বিন্যাস': 'electron-configuration',\r\n    'পারমাণবিক গঠন': 'atomic-structure',\r\n    'রাসায়নিক বিক্রিয়া': 'chemical-reactions',\r\n    \r\n    // Math topics\r\n    'অন্তরকরণ': 'differentiation',\r\n    'সমাকলন': 'integration',\r\n    'সীমা': 'limits',\r\n    'ধারাবাহিকতা': 'continuity',\r\n    'বহুপদী সমীকরণ': 'polynomial-equations',\r\n    \r\n    // Bengali literature topics\r\n    'সাহিত্যিক পরিচয়': 'literary-introduction',\r\n    'কবিতা বিশ্লেষণ': 'poetry-analysis',\r\n    'গল্প পর্যালোচনা': 'story-review',\r\n    'চরিত্র বিশ্লেষণ': 'character-analysis',\r\n  };\r\n\r\n  if (bengaliToEnglish[bengaliText]) {\r\n    return bengaliToEnglish[bengaliText];\r\n  }\r\n\r\n  // Fallback: convert to kebab case\r\n  return bengaliText\r\n    .toLowerCase()\r\n    .replace(/[^\\w\\s-]/g, '')\r\n    .replace(/[\\s_-]+/g, '-')\r\n    .replace(/^-+|-+$/g, '');\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  // Check admin authentication\r\n  if (!isAdminRequest(request)) {\r\n    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n  }\r\n\r\n  try {\r\n    const formData = await request.formData();\r\n    const classId = formData.get('classId') as string;\r\n    const subjectId = formData.get('subjectId') as string;\r\n    const chapterId = formData.get('chapterId') as string;\r\n    const name = formData.get('name') as string;\r\n    const name_bn = formData.get('name_bn') as string;\r\n    const pdfFile = formData.get('pdf') as File | null;\r\n\r\n    if (!classId || !subjectId || !chapterId || !name || !name_bn) {\r\n      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });\r\n    }\r\n\r\n    // Convert Bengali name to English folder name\r\n    const topicId = transliterateBengali(name_bn);\r\n\r\n    // Create topic directory\r\n    const topicPath = path.join(process.cwd(), 'public', 'materials', classId, subjectId, chapterId, topicId);\r\n    \r\n    try {\r\n      await fs.access(topicPath);\r\n      return NextResponse.json({ error: 'Topic already exists' }, { status: 409 });\r\n    } catch {\r\n      // Directory doesn't exist, create it\r\n      await fs.mkdir(topicPath, { recursive: true });\r\n    }\r\n\r\n    // Handle PDF file upload if provided\r\n    if (pdfFile && pdfFile.size > 0) {\r\n      const pdfPath = path.join(topicPath, 'material.pdf');\r\n      const buffer = Buffer.from(await pdfFile.arrayBuffer());\r\n      await fs.writeFile(pdfPath, buffer);\r\n    }\r\n\r\n    // Create metadata file\r\n    const metadataPath = path.join(topicPath, '.metadata.json');\r\n    const metadata = {\r\n      id: topicId,\r\n      name,\r\n      name_bn,\r\n      classId,\r\n      subjectId,\r\n      chapterId,\r\n      hasPdf: !!pdfFile && pdfFile.size > 0,\r\n      created: new Date().toISOString()\r\n    };\r\n    \r\n    await fs.writeFile(metadataPath, JSON.stringify(metadata, null, 2));\r\n\r\n    return NextResponse.json({ \r\n      success: true, \r\n      message: 'Topic created successfully',\r\n      data: { topicId, name, name_bn, classId, subjectId, chapterId, hasPdf: metadata.hasPdf }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error creating topic:', error);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function DELETE(request: NextRequest) {\r\n  // Check admin authentication\r\n  if (!isAdminRequest(request)) {\r\n    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n  }\r\n\r\n  try {\r\n    const url = new URL(request.url);\r\n    const topicId = url.pathname.split('/').pop();\r\n    const { classId, subjectId, chapterId } = await request.json();\r\n\r\n    if (!topicId || !classId || !subjectId || !chapterId) {\r\n      return NextResponse.json({ error: 'Topic ID, Chapter ID, Subject ID, and Class ID are required' }, { status: 400 });\r\n    }\r\n\r\n    const topicPath = path.join(process.cwd(), 'public', 'materials', classId, subjectId, chapterId, topicId);\r\n    \r\n    try {\r\n      await fs.access(topicPath);\r\n      await fs.rm(topicPath, { recursive: true });\r\n      \r\n      return NextResponse.json({ \r\n        success: true, \r\n        message: 'Topic deleted successfully' \r\n      });\r\n    } catch {\r\n      return NextResponse.json({ error: 'Topic not found' }, { status: 404 });\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Error deleting topic:', error);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function PUT(request: NextRequest) {\r\n  // Check admin authentication\r\n  if (!isAdminRequest(request)) {\r\n    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n  }\r\n\r\n  try {\r\n    const formData = await request.formData();\r\n    const topicId = formData.get('topicId') as string;\r\n    const classId = formData.get('classId') as string;\r\n    const subjectId = formData.get('subjectId') as string;\r\n    const chapterId = formData.get('chapterId') as string;\r\n    const pdfFile = formData.get('pdf') as File | null;\r\n\r\n    if (!topicId || !classId || !subjectId || !chapterId) {\r\n      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });\r\n    }\r\n\r\n    const topicPath = path.join(process.cwd(), 'public', 'materials', classId, subjectId, chapterId, topicId);\r\n    \r\n    try {\r\n      await fs.access(topicPath);\r\n    } catch {\r\n      return NextResponse.json({ error: 'Topic not found' }, { status: 404 });\r\n    }\r\n\r\n    // Update PDF file if provided\r\n    if (pdfFile && pdfFile.size > 0) {\r\n      const pdfPath = path.join(topicPath, 'material.pdf');\r\n      const buffer = Buffer.from(await pdfFile.arrayBuffer());\r\n      await fs.writeFile(pdfPath, buffer);\r\n\r\n      // Update metadata\r\n      const metadataPath = path.join(topicPath, '.metadata.json');\r\n      try {\r\n        const metadataContent = await fs.readFile(metadataPath, 'utf-8');\r\n        const metadata = JSON.parse(metadataContent);\r\n        metadata.hasPdf = true;\r\n        metadata.updated = new Date().toISOString();\r\n        await fs.writeFile(metadataPath, JSON.stringify(metadata, null, 2));\r\n      } catch {\r\n        // If metadata doesn't exist, create it\r\n        const metadata = {\r\n          id: topicId,\r\n          classId,\r\n          subjectId,\r\n          chapterId,\r\n          hasPdf: true,\r\n          updated: new Date().toISOString()\r\n        };\r\n        await fs.writeFile(metadataPath, JSON.stringify(metadata, null, 2));\r\n      }\r\n    }\r\n\r\n    return NextResponse.json({ \r\n      success: true, \r\n      message: 'Topic updated successfully'\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error updating topic:', error);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}