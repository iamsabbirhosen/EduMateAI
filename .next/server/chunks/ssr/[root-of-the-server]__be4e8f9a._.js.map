{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///F:/EduMateFinalAI/EduMateAI/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\r\nimport {googleAI} from '@genkit-ai/googleai';\r\n\r\nexport const ai = genkit({\r\n  plugins: [googleAI()],\r\n  model: 'googleai/gemini-2.0-flash',\r\n});\r\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///F:/EduMateFinalAI/EduMateAI/src/ai/flows/generate-diagnostic-test.ts"],"sourcesContent":["'use server';\r\n\r\n/**\r\n * @fileOverview A diagnostic test generation AI agent.\r\n *\r\n * - generateDiagnosticTest - A function that handles the generation of a diagnostic test.\r\n * - GenerateDiagnosticTestInput - The input type for the generateDiagnosticTest function.\r\n * - GenerateDiagnosticTestOutput - The return type for the generateDiagnosticTest function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\n\r\nconst GenerateDiagnosticTestInputSchema = z.object({\r\n  pdfContent: z\r\n    .string()\r\n    .describe('The extracted text content from the topic PDF.'),\r\n  language: z.enum(['Bangla', 'English']).describe('The language of the student.'),\r\n});\r\nexport type GenerateDiagnosticTestInput = z.infer<\r\n  typeof GenerateDiagnosticTestInputSchema\r\n>;\r\n\r\nconst GenerateDiagnosticTestOutputSchema = z.object({\r\n  questions: z\r\n    .array(z.string())\r\n    .describe('The generated diagnostic test questions.'),\r\n});\r\nexport type GenerateDiagnosticTestOutput = z.infer<\r\n  typeof GenerateDiagnosticTestOutputSchema\r\n>;\r\n\r\nexport async function generateDiagnosticTest(\r\n  input: GenerateDiagnosticTestInput\r\n): Promise<GenerateDiagnosticTestOutput> {\r\n  return generateDiagnosticTestFlow(input);\r\n}\r\n\r\nconst prompt = ai.definePrompt({\r\n  name: 'generateDiagnosticTestPrompt',\r\n  input: {schema: GenerateDiagnosticTestInputSchema},\r\n  output: {schema: GenerateDiagnosticTestOutputSchema},\r\n  prompt: `You are an expert in generating diagnostic tests for students.\r\n\r\n  You will receive the content of a PDF document for a specific topic, and your goal is to generate a set of diagnostic questions based on that content.\r\n  The student will use these questions to assess their understanding of the topic and identify any weak areas.\r\n\r\n  Please generate a variety of question types, including multiple-choice, short answer, and true/false questions.\r\n\r\n  Consider the student's language which is {{{language}}}.\r\n\r\n  PDF Content: {{{pdfContent}}}\r\n\r\n  Output the questions in JSON format using the schema definition. Each question should be clear, concise, and directly related to the PDF content.\r\n  Make sure to output valid JSON.\r\n  `,\r\n});\r\n\r\nconst generateDiagnosticTestFlow = ai.defineFlow(\r\n  {\r\n    name: 'generateDiagnosticTestFlow',\r\n    inputSchema: GenerateDiagnosticTestInputSchema,\r\n    outputSchema: GenerateDiagnosticTestOutputSchema,\r\n  },\r\n  async input => {\r\n    const {output} = await prompt(input);\r\n    return output!;\r\n  }\r\n);\r\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,oCAAoC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjD,YAAY,uIAAA,CAAA,IAAC,CACV,MAAM,GACN,QAAQ,CAAC;IACZ,UAAU,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAU;KAAU,EAAE,QAAQ,CAAC;AACnD;AAKA,MAAM,qCAAqC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClD,WAAW,uIAAA,CAAA,IAAC,CACT,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CAAC;AACd;AAKO,eAAe,uBACpB,KAAkC;IAElC,OAAO,2BAA2B;AACpC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAiC;IACjD,QAAQ;QAAC,QAAQ;IAAkC;IACnD,QAAQ,CAAC;;;;;;;;;;;;;EAaT,CAAC;AACH;AAEA,MAAM,6BAA6B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC9C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAnCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 302, "column": 0}, "map": {"version":3,"sources":["file:///F:/EduMateFinalAI/EduMateAI/src/ai/flows/generate-ai-explanation.ts"],"sourcesContent":["'use server';\r\n\r\n/**\r\n * @fileOverview This file defines a Genkit flow for generating AI-based explanations of topic content extracted from a PDF.\r\n *\r\n * - generateAiExplanation - A function that generates AI explanation for a given topic.\r\n * - GenerateAiExplanationInput - The input type for the generateAiExplanation function.\r\n * - GenerateAiExplanationOutput - The return type for the generateAiExplanation function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\n\r\nconst GenerateAiExplanationInputSchema = z.object({\r\n  topicContent: z\r\n    .string()\r\n    .describe('The content of the topic extracted from the PDF.'),\r\n  language: z.enum(['Bangla', 'English']).describe('The language of the explanation.'),\r\n  mode: z.enum(['teacher', 'fun', 'simple']).describe('The teaching mode for the explanation.')\r\n});\r\nexport type GenerateAiExplanationInput = z.infer<typeof GenerateAiExplanationInputSchema>;\r\n\r\nconst GenerateAiExplanationOutputSchema = z.object({\r\n  explanation: z.string().describe('The AI-generated explanation of the topic.'),\r\n});\r\nexport type GenerateAiExplanationOutput = z.infer<typeof GenerateAiExplanationOutputSchema>;\r\n\r\nexport async function generateAiExplanation(input: GenerateAiExplanationInput): Promise<GenerateAiExplanationOutput> {\r\n  return generateAiExplanationFlow(input);\r\n}\r\n\r\nconst teacherPrompt = `You are an expert teacher explaining academic topics to students in a friendly, conversational, and human-like manner. Your explanation should be detailed and structured.`;\r\nconst funPrompt = `You are a fun and engaging tutor who uses creative examples, analogies, and humor to explain topics. Make learning exciting!`;\r\nconst simplePrompt = `You are a helpful assistant who can explain complex topics in the simplest way possible. Use very easy language and break everything down into small, digestible pieces.`;\r\n\r\n\r\nconst prompt = ai.definePrompt({\r\n  name: 'generateAiExplanationPrompt',\r\n  input: {schema: GenerateAiExplanationInputSchema},\r\n  output: {schema: GenerateAiExplanationOutputSchema},\r\n  prompt: `\r\n  {{#if (eq mode \"teacher\")}}\r\n    ${teacherPrompt}\r\n  {{else if (eq mode \"fun\")}}\r\n    ${funPrompt}\r\n  {{else if (eq mode \"simple\")}}\r\n    ${simplePrompt}\r\n  {{/if}}\r\n\r\n  Based on the topic content below, generate a detailed explanation in {{{language}}}.\r\n\r\n  Your explanation should include:\r\n  1.  **Topic Definition:** A clear and easy-to-understand definition of the main topic.\r\n  2.  **Laws Breakdown:** If there are any laws or principles, break them down step-by-step. Explain the concepts behind them. Use examples.\r\n  3.  **Sample Question Patterns:** Provide a few sample questions (and their patterns/types) that are commonly asked from this topic in exams.\r\n\r\n  Topic Content:\r\n  {{topicContent}}`,\r\n});\r\n\r\nconst generateAiExplanationFlow = ai.defineFlow(\r\n  {\r\n    name: 'generateAiExplanationFlow',\r\n    inputSchema: GenerateAiExplanationInputSchema,\r\n    outputSchema: GenerateAiExplanationOutputSchema,\r\n  },\r\n  async input => {\r\n    const {output} = await prompt(input);\r\n    return output!;\r\n  }\r\n);\r\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CAAC;IACZ,UAAU,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAU;KAAU,EAAE,QAAQ,CAAC;IACjD,MAAM,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAW;QAAO;KAAS,EAAE,QAAQ,CAAC;AACtD;AAGA,MAAM,oCAAoC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjD,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAGO,eAAe,sBAAsB,KAAiC;IAC3E,OAAO,0BAA0B;AACnC;AAEA,MAAM,gBAAgB,CAAC,0KAA0K,CAAC;AAClM,MAAM,YAAY,CAAC,4HAA4H,CAAC;AAChJ,MAAM,eAAe,CAAC,wKAAwK,CAAC;AAG/L,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAgC;IAChD,QAAQ;QAAC,QAAQ;IAAiC;IAClD,QAAQ,CAAC;;IAEP,EAAE,cAAc;;IAEhB,EAAE,UAAU;;IAEZ,EAAE,aAAa;;;;;;;;;;;kBAWD,CAAC;AACnB;AAEA,MAAM,4BAA4B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC7C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA1CoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 388, "column": 0}, "map": {"version":3,"sources":["file:///F:/EduMateFinalAI/EduMateAI/src/ai/flows/answer-follow-up-questions.ts"],"sourcesContent":["'use server';\r\n\r\n/**\r\n * @fileOverview A chat-based follow-up question answering AI agent.\r\n *\r\n * - answerFollowUpQuestions - A function that handles answering follow-up questions about a topic.\r\n * - AnswerFollowUpQuestionsInput - The input type for the answerFollowUpQuestions function.\r\n * - AnswerFollowUpQuestionsOutput - The return type for the answerFollowUpQuestions function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\n\r\nconst AnswerFollowUpQuestionsInputSchema = z.object({\r\n  pdfContent: z.string().describe('The content of the PDF for the topic.'),\r\n  question: z.string().describe('The follow-up question from the student.'),\r\n  language: z.enum(['Bangla', 'English']).describe('The language to respond in.'),\r\n});\r\nexport type AnswerFollowUpQuestionsInput = z.infer<typeof AnswerFollowUpQuestionsInputSchema>;\r\n\r\nconst AnswerFollowUpQuestionsOutputSchema = z.object({\r\n  answer: z.string().describe('The answer to the follow-up question.'),\r\n});\r\nexport type AnswerFollowUpQuestionsOutput = z.infer<typeof AnswerFollowUpQuestionsOutputSchema>;\r\n\r\nexport async function answerFollowUpQuestions(input: AnswerFollowUpQuestionsInput): Promise<AnswerFollowUpQuestionsOutput> {\r\n  return answerFollowUpQuestionsFlow(input);\r\n}\r\n\r\nconst prompt = ai.definePrompt({\r\n  name: 'answerFollowUpQuestionsPrompt',\r\n  input: {schema: AnswerFollowUpQuestionsInputSchema},\r\n  output: {schema: AnswerFollowUpQuestionsOutputSchema},\r\n  prompt: `You are a helpful AI chatbot assisting students with their studies. You will be provided with the content of a PDF document and a follow-up question from the student. Your task is to answer the question based on the provided content.\r\n\r\nPDF Content:\r\n{{{pdfContent}}}\r\n\r\nQuestion:\r\n{{{question}}}\r\n\r\nAnswer in {{language}}.\r\n`,\r\n});\r\n\r\nconst answerFollowUpQuestionsFlow = ai.defineFlow(\r\n  {\r\n    name: 'answerFollowUpQuestionsFlow',\r\n    inputSchema: AnswerFollowUpQuestionsInputSchema,\r\n    outputSchema: AnswerFollowUpQuestionsOutputSchema,\r\n  },\r\n  async input => {\r\n    const {output} = await prompt(input);\r\n    return output!;\r\n  }\r\n);\r\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,qCAAqC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClD,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAChC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,UAAU,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAU;KAAU,EAAE,QAAQ,CAAC;AACnD;AAGA,MAAM,sCAAsC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnD,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC9B;AAGO,eAAe,wBAAwB,KAAmC;IAC/E,OAAO,4BAA4B;AACrC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAkC;IAClD,QAAQ;QAAC,QAAQ;IAAmC;IACpD,QAAQ,CAAC;;;;;;;;;AASX,CAAC;AACD;AAEA,MAAM,8BAA8B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC/C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA7BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 459, "column": 0}, "map": {"version":3,"sources":["file:///F:/EduMateFinalAI/EduMateAI/.next-internal/server/app/%28main%29/learn/%5B...slug%5D/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {generateDiagnosticTest as '40630095df24980b62f9513a84d191bb987c04faf2'} from 'ACTIONS_MODULE0'\nexport {generateAiExplanation as '402f890aaad837e52b65a1c6f2e1c6daffcd48bb3f'} from 'ACTIONS_MODULE1'\nexport {answerFollowUpQuestions as '40d92a9bea32e9e7f284264bd200ebdf7e66909fed'} from 'ACTIONS_MODULE2'\n"],"names":[],"mappings":";AAAA;AACA;AACA","debugId":null}},
    {"offset": {"line": 529, "column": 0}, "map": {"version":3,"sources":["file:///F:/EduMateFinalAI/EduMateAI/src/app/%28main%29/learn/%5B...slug%5D/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(main)/learn/[...slug]/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(main)/learn/[...slug]/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA2S,GACxU,yEACA","debugId":null}},
    {"offset": {"line": 543, "column": 0}, "map": {"version":3,"sources":["file:///F:/EduMateFinalAI/EduMateAI/src/app/%28main%29/learn/%5B...slug%5D/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(main)/learn/[...slug]/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(main)/learn/[...slug]/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAuR,GACpT,qDACA","debugId":null}},
    {"offset": {"line": 557, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}