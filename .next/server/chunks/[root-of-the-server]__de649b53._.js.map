{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":["file:///F:/EduMateFinalAI/EduMateAI/src/app/api/auth/admin/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport bcrypt from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\n\r\n// Admin credentials (in production, store in environment variables or database)\r\nconst ADMIN_CREDENTIALS = {\r\n  username: process.env.ADMIN_USERNAME || 'admin',\r\n  password: process.env.ADMIN_PASSWORD || 'EduMateAdmin2024!',\r\n};\r\n\r\nconst JWT_SECRET = process.env.JWT_SECRET || 'EduMate-AI-Super-Secret-Key-2024-Change-In-Production';\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const { username, password } = await request.json();\r\n\r\n    if (!username || !password) {\r\n      return NextResponse.json({ error: 'Username and password are required' }, { status: 400 });\r\n    }\r\n\r\n    // Verify credentials\r\n    if (username === ADMIN_CREDENTIALS.username && password === ADMIN_CREDENTIALS.password) {\r\n      // Create JWT token\r\n      const token = jwt.sign(\r\n        { \r\n          username: ADMIN_CREDENTIALS.username,\r\n          role: 'admin',\r\n          iat: Math.floor(Date.now() / 1000)\r\n        },\r\n        JWT_SECRET,\r\n        { expiresIn: '24h' }\r\n      );\r\n\r\n      // Create response with cookie\r\n      const response = NextResponse.json({\r\n        success: true,\r\n        message: 'Admin logged in successfully',\r\n        user: { username: ADMIN_CREDENTIALS.username, role: 'admin' }\r\n      });\r\n\r\n      // Set HTTP-only cookie\r\n      response.cookies.set('admin-token', token, {\r\n        httpOnly: true,\r\n        secure: false, // Set to false for localhost development\r\n        sameSite: 'lax', // Changed from 'strict' to 'lax' for better compatibility\r\n        maxAge: 60 * 60 * 24, // 24 hours\r\n        path: '/'\r\n      });\r\n\r\n      return response;\r\n    } else {\r\n      return NextResponse.json({ error: 'Invalid credentials' }, { status: 401 });\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Admin auth error:', error);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const token = request.cookies.get('admin-token')?.value;\r\n\r\n    if (!token) {\r\n      return NextResponse.json({ error: 'No token provided' }, { status: 401 });\r\n    }\r\n\r\n    try {\r\n      const decoded = jwt.verify(token, JWT_SECRET) as any;\r\n      \r\n      return NextResponse.json({\r\n        success: true,\r\n        user: { username: decoded.username, role: decoded.role }\r\n      });\r\n    } catch {\r\n      return NextResponse.json({ error: 'Invalid token' }, { status: 401 });\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Admin auth verification error:', error);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function DELETE(request: NextRequest) {\r\n  try {\r\n    const response = NextResponse.json({\r\n      success: true,\r\n      message: 'Admin logged out successfully'\r\n    });\r\n\r\n    // Clear the cookie\r\n    response.cookies.set('admin-token', '', {\r\n      httpOnly: true,\r\n      secure: false, // Set to false for localhost development\r\n      sameSite: 'lax',\r\n      maxAge: 0,\r\n      path: '/'\r\n    });\r\n\r\n    return response;\r\n\r\n  } catch (error) {\r\n    console.error('Admin logout error:', error);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}